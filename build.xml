<?xml version="1.0"?>

<!--
Ant Buildfile for GNU Prolog for Java.
 Copyright (C) 1997-1999  Constantine Plotnikov, 2010 Daniel Thomas
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.
 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA  02111-1307, USA. The text ol license can be also found 
 at http://www.gnu.org/copyleft/lgpl.html 
-->

<project name="gnuprolog" default="main" basedir=".">

  <target name="init">
  	<property file="build.properties"/>
    <property name="Name" value="GNU Prolog for Java"/>
    <property name="name" value="gnuprolog"/>
    <property name="version" value="0.1.0"/>
    <property name="_version" value="0_1_0"/>

    <property name="debug" value="on"/>

    <property name="src.dir" value="${basedir}/src"/>
    <property name="docs.dir" value="${basedir}/docs"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="package.dir" value="${build.dir}/${name}"/>
  	<property name="test.dir" value="${basedir}/test"/>
    <property name="classes" value="${build.dir}/classes"/>
    <property name="classpath" value=""/>
    <property name="manifest" value="manifest.mf"/>
    <!-- <property name="build.compiler" value="jikes"/> -->

  </target>

  <!-- =================================================================== -->
  <!-- Main                                                                -->
  <!-- =================================================================== -->
  <target name="main" depends="build">
  </target>


  <target name="build" depends="jar">
  </target>

  <target name="package" depends="zip">
  </target>

  <target name="zip" depends="complete_zip">
  </target>

  <target name="src_zip" depends="copy_src">
    <zip zipfile="${build.dir}/${name}-src-${_version}.zip" basedir="${build.dir}" includes="${name}/**/*">
    </zip> 
  </target>

  <target name="copy_src" depends="jar">
    <delete dir="${package.dir}"/>
    <copy todir="${package.dir}/src"> 
      <fileset dir="${src.dir}"/>
    </copy>
    <copy todir="${package.dir}/docs">
      <fileset dir="${docs.dir}"/>
    </copy>
    <copy file="${manifest}" todir="${package.dir}"/>
    <copy file="${basedir}/build.xml" todir="${package.dir}"/>
    <copy file="${basedir}/changes.txt" todir="${package.dir}"/>
    <copy file="${basedir}/package-list" todir="${package.dir}"/>
  </target>

  <target name="copy_complete" depends="src_zip,javadoc">
    <copy todir="${package.dir}/docs/api">
      <fileset dir="${build.dir}/api"/>
    </copy>
    <copy file="${build.dir}/${name}.jar" todir="${package.dir}"/>
  </target>

  <target name="complete_zip" depends="copy_complete">
    <zip zipfile="${build.dir}/${name}-complete-${_version}.zip" basedir="${build.dir}" includes="${name}/**/*">
    </zip> 
  </target>


  <target name="javadoc" depends="init">
    <delete dir="${build.dir}/api"/>
    <mkdir dir="${build.dir}/api"/>
    <javadoc private="true"
             destdir="${build.dir}/api"
             packageList="${basedir}/package-list"
             sourcepath="${src.dir}"
             author="true"
             use="true"
             header="&lt;a href='http://gnuprologjava.sourceforge.net'&gt; GNU Prolog for Java &lt;/a&gt;"
             footer="&lt;a href='http://gnuprologjava.sourceforge.net'&gt; GNU Prolog for Java &lt;/a&gt;"
    />
  </target>

  <target name="jar" depends="compile">
    <delete file="${build.dir}/${name}.jar"/>
    <filter token="version" value="${version}"/>
    <copy file="${manifest}"
          tofile="${classes}/${manifest}"
          filtering="on"
    />
    <copy file="${src.dir}/gnu/prolog/vm/buildins/buildins.pro"
          tofile="${classes}/gnu/prolog/vm/buildins/buildins.pro"
          filtering="off"
    />
    <jar jarfile="${build.dir}/${name}.jar"
         basedir="${classes}"
         excludes="${manifest}"
         manifest="${classes}/${manifest}"
    />
  </target>

  <target name="compile" depends="init">
    <mkdir dir="${classes}"/>
    <javac srcdir="${src.dir}"
           destdir="${classes}"
           debug="${debug}"
           deprecation="off"
           optimize="on"
    />
  </target>

  <target name="site" depends="javadoc">
    <delete dir="${build.dir}/site"/>
    <delete file="${build.dir}/site.zip"/>
    <mkdir dir="${build.dir}/site"/>
    <filter token="version" value="${_version}"/>
    <copy file="${basedir}/site/index.html" todir="${build.dir}/site" filtering="on">
    </copy>
    <copy todir="${build.dir}/site/api">
      <fileset dir="${build.dir}/api"/>
    </copy>
    <zip zipfile="${build.dir}/site/vanila.zip" basedir="${basedir}/test"/>
    <zip zipfile="${build.dir}/site.zip" basedir="${build.dir}/site"/>
  </target>

  <target name="generate-parser" depends="init">
  	<javacc
  	    target="${src.dir}/gnu/prolog/io/parser/TermParser.jj"
  	    outputdirectory="${src.dir}/gnu/prolog/io/parser/gen/"
  		jdkversion="1.6"
  		javacchome="${javacc.home}"
  		debugparser="${javacc.debug}"
  	/>
  </target>

  <target name="test" depends="build">
  	<!-- Based on:
  	cd vanilla
    @attrib -R *.*
  	java -jar ..\..\build\gnuprolog.jar -once gnuprolog.pl validate >..\suite.out 2>..\suite.err
  	-->
  	<java
  	    dir="${test.dir}/vanilla"
  	    jar="${build.dir}/${name}.jar"
  	    fork="true"
  	    failonerror="true"
  	    >
  		<arg line="-once gnuprolog.pl validate >../suite.out 2>../suite.err"/>
  	</java>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans up generated stuff                                           -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete dir="${build.dir}"/>
  </target>
  <target name="clean-doc" depends="init">
  	<delete dir="${docs.dir}/api"/>
  </target>

</project>

